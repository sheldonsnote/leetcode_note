原题如下：
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---

You should return [1, 3, 4]. 
思路如下：
说一下题目意思，要求返回二叉树上最右边的元素。所以就一层层遍历得到结果。
代码如下：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int>ans;
        if(root == NULL) return ans;
        queue<TreeNode*>que;
        while(!que.empty())
        que.pop();
        que.push(root);
        TreeNode *temp;
        while(!que.empty())
        {
            int cnt = que.size();
            for(int i = 0; i < cnt; i++){
            temp = que.front();
            que.pop();
            if(temp->left)
            que.push(temp->left);
            if(temp->right)
            que.push(temp->right);
            }
            ans.push_back(temp->val);
        }
        return ans;
    }
};
