原题如下：
Given a singly linked list, determine if it is a palindrome.

Follow up:
Could you do it in O(n) time and O(1) space?
思路如下：
题意是要判断一个单向链表是不是回文的。
开始的想到的解法是最常见的，可以用栈来存储单链表中的数值元素，然后跟原来的作比较
代码（1）如下：
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head->next == NULL)
        return true;
        stack<int>a;
        while(!a.empty())
        a.pop();
        ListNode *temp = head;
        while(temp)
        {
            a.push(temp->val);
            temp = temp->next;
        }
        while(head)
        {
            if(head->val != a.top())
            return false;
            a.pop();
            head = head->next;
        }
        return true;
    }
};
但是本题要求的是用O（n）的时间复杂度和o（1）的空间复杂度。所以我们还要想一个办法降一下空间复杂度。
在博客上看到了有反转链表的方法，http://blog.csdn.net/sunao2002002/article/details/46918645
我再深入理解一下再更这个。
