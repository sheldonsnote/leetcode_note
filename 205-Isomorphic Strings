原题如下:
Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

For example,
Given "egg", "add", return true.

Given "foo", "bar", return false.

Given "paper", "title", return true.
思路如下:
使用map记录遍历s的每一个字母，并且记录s[i]到t[i]的映射，当发现与已有的映射不同时，
说明无法同构，直接return false。但是这样只能保证从s到t的映射，不能保证从t到s的映射，
所以交换s与t的位置再重来一遍上述的遍历就OK了
代码如下:
c++
class Solution {
public:
    bool isIsomorphic(string s, string t) {
         if(s.length() != t.length()) return false;
        map<char,char> m ;
        for(int i = 0; i < s.length(); i++)
        {
            if(m.find(s[i]) == m.end()) m[s[i]] = t[i];
            else if(m[s[i]] != t[i]) return false;
        }
        m.clear();
        for(int i = 0;i < t.length(); i++)
        {
            if(m.find(t[i]) == m.end()) m[t[i]] = s[i];
            else if(m[t[i]] != s[i]) return false ;
        }
    }
};
